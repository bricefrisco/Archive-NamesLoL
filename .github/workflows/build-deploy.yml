name: CICD
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make envfile
        run: |
          cd backend
          echo RIOT_API_TOKEN=${{ secrets.RIOT_API_TOKEN }} >> .env
          echo AWS_REGION=us-east-1 >> .env
          echo AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_ACCESS_SECRET=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo BETA_CLIENT_KEY=${{ secrets.BETA_CLIENT_KEY }} >> .env

      - name: BACKEND Install Dependencies
        run: cd backend && npm install

      - name: BACKEND Webpack
        run: cd backend && npm run build

      - name: BACKEND Build, tag, and push image to Amazon ECR
        run: |
          docker build -t ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }} backend/.
          docker push ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.AWS_ECR_REPOSITORY }}

      - name: BACKEND Update fargate service
        run: aws ecs update-service --cluster ${{ secrets.AWS_CLUSTER_NAME }} --service ${{ secrets.AWS_SERVICE_NAME }} --force-new-deployment

      - name: FRONTEND Install dependencies
        run: cd frontend && npm install

      - name: FRONTEND webpack
        run: cd frontend && CI= npm run build

      - name: Deploy to s3
        run: aws s3 sync frontend/build s3://shopdb